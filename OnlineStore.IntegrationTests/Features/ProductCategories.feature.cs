// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OnlineStore.IntegrationTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ManagementAListOfProductCategoriesFeature : object, Xunit.IClassFixture<ManagementAListOfProductCategoriesFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "management a list of product categories", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProductCategories.feature"
#line hidden
        
        public ManagementAListOfProductCategoriesFeature(ManagementAListOfProductCategoriesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 3
    #line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="We can create several product categories")]
        [Xunit.TraitAttribute("FeatureTitle", "management a list of product categories")]
        [Xunit.TraitAttribute("Description", "We can create several product categories")]
        public async System.Threading.Tasks.Task WeCanCreateSeveralProductCategories()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("We can create several product categories", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Description"});
                table8.AddRow(new string[] {
                            "Electronics",
                            "Devices like smartphones, laptops, and smart home gadgets that enhance connectivi" +
                                "ty and entertainment."});
                table8.AddRow(new string[] {
                            "Home Appliances",
                            "Essential household items such as refrigerators, ovens, and washing machines that" +
                                " improve daily tasks."});
                table8.AddRow(new string[] {
                            "Health and Beauty",
                            "Personal care products, including cosmetics and skincare, that promote well-being" +
                                " and appearance."});
#line 6
        await testRunner.WhenAsync("we add product categories:", ((string)(null)), table8, "When ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Name"});
                table9.AddRow(new string[] {
                            "Electronics"});
                table9.AddRow(new string[] {
                            "Home Appliances"});
                table9.AddRow(new string[] {
                            "Health and Beauty"});
#line 12
        await testRunner.ThenAsync("we get list of product categories:", ((string)(null)), table9, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="We can create several product categories and update one")]
        [Xunit.TraitAttribute("FeatureTitle", "management a list of product categories")]
        [Xunit.TraitAttribute("Description", "We can create several product categories and update one")]
        public async System.Threading.Tasks.Task WeCanCreateSeveralProductCategoriesAndUpdateOne()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("We can create several product categories and update one", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Description"});
                table10.AddRow(new string[] {
                            "Fitness Equipment",
                            "Equipment such as treadmills, weights, and yoga mats designed to support physical" +
                                " exercise and wellness."});
                table10.AddRow(new string[] {
                            "Office Supplies",
                            "Items like pens, notebooks, and printers that facilitate productivity and organiz" +
                                "ation in workspaces."});
#line 20
        await testRunner.GivenAsync("we add product categories:", ((string)(null)), table10, "Given ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Description"});
                table11.AddRow(new string[] {
                            "Gardening Tools",
                            "Equipment such as shovels, rakes, and pruners used for planting, maintaining, and" +
                                " landscaping gardens."});
#line 25
        await testRunner.WhenAsync("we update product categories:", ((string)(null)), table11, "When ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Description"});
                table12.AddRow(new string[] {
                            "Gardening Tools",
                            "Equipment such as shovels, rakes, and pruners used for planting, maintaining, and" +
                                " landscaping gardens."});
                table12.AddRow(new string[] {
                            "Office Supplies",
                            "Items like pens, notebooks, and printers that facilitate productivity and organiz" +
                                "ation in workspaces."});
#line 29
        await testRunner.ThenAsync("we get list of product categories:", ((string)(null)), table12, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="We can create several product categories and delete one")]
        [Xunit.TraitAttribute("FeatureTitle", "management a list of product categories")]
        [Xunit.TraitAttribute("Description", "We can create several product categories and delete one")]
        public async System.Threading.Tasks.Task WeCanCreateSeveralProductCategoriesAndDeleteOne()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("We can create several product categories and delete one", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Description"});
                table13.AddRow(new string[] {
                            "Electronics",
                            "Devices like smartphones, laptops, and smart home gadgets that enhance connectivi" +
                                "ty and entertainment."});
                table13.AddRow(new string[] {
                            "Home Appliances",
                            "Essential household items such as refrigerators, ovens, and washing machines that" +
                                " improve daily tasks."});
                table13.AddRow(new string[] {
                            "Health and Beauty",
                            "Personal care products, including cosmetics and skincare, that promote well-being" +
                                " and appearance."});
#line 35
        await testRunner.GivenAsync("we add product categories:", ((string)(null)), table13, "Given ");
#line hidden
#line 41
        await testRunner.WhenAsync("we delete product category with name: \"Electronics\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Description"});
                table14.AddRow(new string[] {
                            "Home Appliances",
                            "Essential household items such as refrigerators, ovens, and washing machines that" +
                                " improve daily tasks."});
                table14.AddRow(new string[] {
                            "Health and Beauty",
                            "Personal care products, including cosmetics and skincare, that promote well-being" +
                                " and appearance."});
#line 43
        await testRunner.ThenAsync("we get list of product categories:", ((string)(null)), table14, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="You cannot add a product category with an empty name")]
        [Xunit.TraitAttribute("FeatureTitle", "management a list of product categories")]
        [Xunit.TraitAttribute("Description", "You cannot add a product category with an empty name")]
        [Xunit.TraitAttribute("Category", "negative")]
        public async System.Threading.Tasks.Task YouCannotAddAProductCategoryWithAnEmptyName()
        {
            string[] tagsOfScenario = new string[] {
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("You cannot add a product category with an empty name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Description"});
                table15.AddRow(new string[] {
                            "",
                            "Devices like smartphones, laptops, and smart home gadgets that enhance connectivi" +
                                "ty and entertainment."});
#line 50
        await testRunner.WhenAsync("we add product categories:", ((string)(null)), table15, "When ");
#line hidden
#line 54
        await testRunner.ThenAsync("we get a validation error", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ManagementAListOfProductCategoriesFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ManagementAListOfProductCategoriesFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
